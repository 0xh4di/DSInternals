#
# Module manifest for module 'Invoke-MsBuild'
#
# Generated by: Dan.Schroeder
#
# Generated on: 3/1/2016
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'Invoke-MsBuild.psm1'

# Version number of this module.
ModuleVersion = '2.2.0'

# ID used to uniquely identify this module
GUID = '8ca20938-b92a-42a1-bf65-f644e16a8d9e'

# Author of this module
Author = 'Dan.Schroeder'

# Company or vendor of this module
# CompanyName = 'Unknown'

# Copyright statement for this module
Copyright = '(c) 2016 Dan.Schroeder. All rights reserved.'

# Description of the functionality provided by this module
Description = 'Executes the MSBuild.exe tool against the specified Visual Studio solution or project file.'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '2.0'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = '*'

# Cmdlets to export from this module
CmdletsToExport = '*'

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module
AliasesToExport = '*'

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @('Invoke', 'MsBuild', 'Invoke-MsBuild', 'Build', 'Compile')

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/deadlydog/Invoke-MsBuild/blob/master/license.md'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/deadlydog/Invoke-MsBuild'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = '- Added LogVerbosityLevel parameter to adjust the verbosity MsBuild uses to write to the log file.
- Fixed bug that prevented us from finding msbuild.exe on some machines.

----------
Invoke-MsBuild v2 has the following breaking changes from v1:
  - A hash table with several properties is returned instead of a simple $true/$false/$null value.
  - The GetLogPath switch is gone and replaced with the WhatIf switch.

New features in v2 include:
  - A build log file containing only build errors is created alongside the regular build log file.
  - The errors build log file can be auto-launched on build failure.
  - New switch has been added to show the build output in the calling scripts console window (does not work with some 3rd party consoles due to Start-Process cmdlet bug).
  - A hash table containing the following properties is now returned:

+ BuildSucceeded = $true if the build passed, $false if the build failed, and $null if we are not sure.
+ BuildLogFilePath = The path to the builds log file.
+ BuildErrorsLogFilePath = The path to the builds error log file.
+ ItemToBuildFilePath = The item that MsBuild is ran against.
+ CommandUsedToBuild = The full command that is used to invoke MsBuild. This can be useful for inspecting what parameters are passed to MsBuild.exe.
+ Message = A message describing any problems that were encoutered by Invoke-MsBuild. This is typically an empty string unless something went wrong.
+ MsBuildProcess = The process that was used to execute MsBuild.exe.

Changes to make when updating from v1 to v2:
- To capture/display the build success result, you must change:
  Invoke-MsBuild ...
to:
  (Invoke-MsBuild ...).BuildSucceeded

- To get the path where the log file will be created, you must change:
  Invoke-MsBuild ... -GetLogPath
to:
  (Invoke-MsBuild ... -WhatIf).BuildLogFilePath'

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

